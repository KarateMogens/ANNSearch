/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.2.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven("https://maven.scijava.org/content/repositories/public/")
    
}

dependencies {

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.1")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:31.1-jre")

    // HDF5 file handling
    // https://mvnrepository.com/artifact/cisd/jhdf5
    implementation("cisd:jhdf5:19.04.1")

    // https://mvnrepository.com/artifact/com.esotericsoftware/kryo
    implementation("com.esotericsoftware:kryo:5.6.0")


    // log4j 2 
    implementation("org.apache.logging.log4j:log4j-api:2.20.0")
    implementation("org.apache.logging.log4j:log4j-core:2.20.0")
    implementation("org.apache.logging.log4j:log4j-slf4j-impl:2.20.0")

}

// Apply a specific Java toolchain to ease working on different environments.
application {
    // Define the main class for the application.
    mainClass.set("lsh.App")
}

sourceSets {
    main {
        resources {
            exclude("**/*.ser")
            exclude("**/*.hdf5")
            exclude("**/*.properties")
        }
    }
}

tasks.jar {
    manifest.attributes["Main-Class"] = "lsh.App"
    val dependencies = configurations
        .runtimeClasspath
        .get()
        .map(::zipTree) // OR .map { zipTree(it) }
    from(dependencies)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    destinationDirectory.set(file("ANNSearchBuild"))

}

tasks.register<Copy>("copyResources") {
    from("src/main/resources") // Source directory
    exclude("log4j2.xml")
    into("ANNSearchBuild") // Destination directory
    doLast {
        println("Copying config.properties to ANNSearch")
    }
}

tasks.named("jar") {
    finalizedBy(tasks.named("copyResources"))
}

// Ensure the copyResources task runs after the jar task
tasks.named("copyResources") {
    dependsOn(tasks.named("jar"))
    dependsOn(tasks.named("distZip"))
    dependsOn(tasks.named("distTar"))
    dependsOn(tasks.named("startScripts"))
}

tasks.named<Test>("test") {
    useJUnitPlatform()
    testLogging {
		events("PASSED")
    }
}
